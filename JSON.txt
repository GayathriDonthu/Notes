															JSON
															====

http://tutorials.jenkov.com/java-json/index.html
															
															
JSON APIs
---------

1. Jackson
2. GSON
3. Boon
4. Json.org
5. JSONP - JSR 353 compliant JSON Parser
6. Simple JSON														

JSON - Data exchange format between browsers and web servers becoz the browsers can parse JSON and into JavaScript objects natively.

-> On the server, however, JSON needs to be parsed and generated using JSON APIs. 

Jackson
-------

Contains 2 JSON generators

1. Jackson objectMapper - which can generate JSON from custom java objects, or from a specific tree structure.(tree model)
2. Jackson JsonGenerator - which can generate JSON one token at a time.

GSON
----

-> GSON is a Java JSON API from Google. That is where the G in GSON comes from. GSON is reasonably flexible, but Jackson was faster than GSON. 

GSON contains 3 Java JSON parsers:

1. The Gson class -  which can parse JSON into custom Java objects.
2. The GSON JsonReader - which is GSON's pull JSON parser - parsing JSON one token at a time.
3. The GSON JsonParser  - which can parse JSON into a tree structure of GSON specific Java objects.

GSON also contains a JSON generator:

1. The Gson class which can generate JSON from custom Java classes.

Boon
----

-> Boon is fastest of all.
-> Boon is being used as the standard JSON API in Groovy. 
-> Boon's API is very similar to Jackson's, But - Boon is more than just a Java JSON API. Boon is a general purpose toolkit for working with data easily. This is handy e.g. inside REST services, file processing apps etc.

Boon contains the following Java JSON parsers:

1. The Boon ObjectMapper which can parse JSON into custom objects or Java Maps

-> Like in Jackson, the Boon ObjectMapper can also be used to generate JSON from custom Java objects.

JSON.org
--------

-> JSON.org also has an open source Java JSON API. 
-> This was one of the first Java JSON APIs available out there. It is reasonably easy to use, but not as flexible or fast as others.

JSONP
-----

-> JSONP is a JSR 353 compliant JSON API for Java. 
-> Being JSR 353 compliant means, that if you use the standard APIs it should be possible to exchange the JSONP implementation with another API in the future, without breaking your code.

Jackson Intsallation
--------------------

The Java JSON API called Jackson consists of one core JAR file (project) and two other JAR files that use the core JAR file. The three JAR files (projects) in the Jackson JSON API are:

Jackson Core
Jackson Annotations
Jackson Databind
These projects use each other in that sequence too. Jackson Annotation uses the Jackson Core features, and the Jackson Databind uses Jackson Annotation.

In order to "install" Jackson in your Java application you need to add these JAR files to the classpath of your application. 

Adding the JAR Files to Your Classpath :
--------------------------------------

-> In order to use any of t-he Jackson projects (JAR files) we must add the corresponding JAR file to the classpath of your application.

Adding Jackson as Maven Dependencies
------------------------------------

If your project uses Maven to build (and resolve + download dependencies), you need to add Jackson as a dependency to your project's POM file. Here is how Jackson as Maven dependencies look:

<dependency>
  <groupId>com.fasterxml.jackson.core</groupId>
  <artifactId>jackson-core</artifactId>
  <version>2.5.3</version>
</dependency>

<dependency>
  <groupId>com.fasterxml.jackson.core</groupId>
  <artifactId>jackson-annotations</artifactId>
  <version>2.5.3</version>
</dependency>

<dependency>
  <groupId>com.fasterxml.jackson.core</groupId>
  <artifactId>jackson-databind</artifactId>
  <version>2.5.3</version>
</dependency>


-> both jackson-annotations and jackson-databind have "transitive dependencies" to jackson-core (and jackson-databind to jackson-annotations). 

Jackson - ObjectMapper
-----------------------

-> Jackson's objectMapper can parse a JSON from a string, stream or file,  and create an object graph representing the parsed JSON - simplest way

Jackson Databind
----------------

-> The ObjectMapper is located in the Jackson Databind project, so your application will need that project on its classpath to work. 

Jackson ObjectMapper Example
=============================

public class Car {

	public String brand;
	public int doors;

}


package com.jackson.objectMapper;

import java.io.IOException;

import com.fasterxml.jackson.databind.ObjectMapper;

public class ObjectMapperDemo {

	public static void main(String[] args) {

		ObjectMapper objectMapper = new ObjectMapper();

		String carJSON = "{	\"brand\" : \"Mercedes\", \"doors\" : 5	}";

		try {
			Car car = objectMapper.readValue(carJSON, Car.class);

			System.out.println("car.brand = " + car.brand);
			System.out.println("car doors = " + car.doors);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}

Jackson Annotations
-------------------

-> Jackson Annotations are used to modify how Jackson reads and writes JSON to and from Java objects.

Jackson JSON Tree Model
-----------------------

-> Jackson has a built-in tree model which can be used to represent a JSON object. Jackson's tree model is useful if you don't know how the JSON you will receive looks, or if you for some reason cannot create a class to represent it.
-> The Jackson tree model is represented by the JsonNode class. 
->Jackson ObjectMapper is used to parse JSON into a JsonNode tree model

package com.jackson.treeModel;

import java.io.IOException;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

public class JacksonTreeModel {

	public static void main(String[] args) {

		ObjectMapper objectMapper = new ObjectMapper();

		String carJSON = "{ \"brand\" : \"Mercedes\", \"doors\" : 5}";

		try {
			JsonNode node = objectMapper.readValue(carJSON, JsonNode.class);

			JsonNode brandNode = node.get("brand");
			String brand = brandNode.asText();
			System.out.println("brand = " + brand);

			JsonNode doorsNode = node.get("doors");
			int doors = doorsNode.asInt();
			System.out.println("doors = " + doors);

		} catch (IOException e) {

		}

	}
}

Jackson JsonNode class

-> Once we have parsed your JSON into a JsonNode (or a tree of JsonNode instances) you can navigate the JsonNode tree model as shown in above example.

Reading JSON From a String
--------------------------

ObjectMapper objectMapper = new ObjectMapper();
String carJSON = "{	\"brand\" : \"Mercedes\", \"doors\" : 5	}";
Car car = objectMapper.readValue(carJSON, Car.class);

Reading JSON From a Reader
--------------------------

ObjectMapper objectMapper = new ObjectMapper();
String carJson ="{ \"brand\" : \"Mercedes\", \"doors\" : 4 }";
Reader reader = new StringReader(carJson);
Car car = objectMapper.readValue(reader, Car.class);

Reading JSON From a File
------------------------

ObjectMapper objectMapper = new ObjectMapper();
File file = new File("data/car.json");
Car car = objectMapper.readValue(file, Car.class);

Reading JSON From a URL
-----------------------

ObjectMapper objectMapper = new ObjectMapper();
URL url = new URL("file:data/car.json");
Car car = objectMapper.readValue(url, Car.class);

Reading JSON From an InputStream
--------------------------------

ObjectMapper objectMapper = new ObjectMapper();
InputStream input = new FileInputStream("data/car.json");
Car car = objectMapper.readValue(input, Car.class);

Reading JSON From a Byte Array
------------------------------

ObjectMapper objectMapper = new ObjectMapper();
String carJson = "{ \"brand\" : \"Mercedes\", \"doors\" : 5 }";
byte[] bytes = carJson.getBytes("UTF-8");
Car car = objectMapper.readValue(bytes, Car.class);

Generate JSON From Objects
==========================

The Jackson ObjectMapper can also be used to generate JSON from an object by using one of the methods:

1. writeValue()
2. writeValueAsString()
3. writeValueAsBytes()

ObjectMapper objectMapper = new ObjectMapper();

Car car = new Car();
car.brand = "BMW";
car.doors = 4;

objectMapper.writeValue(
    new FileOutputStream("data/output-2.json"), car);

The ObjectMapper's writeValueAsString() and writeValueAsBytes() both generate JSON from an object, and return the generated JSON as a String or as a byte array. 

Jackson - Json Parser
---------------------

-> The Jackson JsonParser class is a low level JSON parser. It is similar to the Java StAX parser for XML, except the JsonParser parses JSON and not XML.
-> The Jackson JsonParser works at a lower level than the Jackson ObjectMapper. This makes the JsonParser faster than the ObjectMapper, but also more cumbersome to work with.

Creating a JsonParser
---------------------

-> To create Json Parser, JsonFactory is needed.
-> Jsonfactory is used to create JsonParser instances. 
-> The JsonFactory class contains several createParser() methods, each taking a different JSON source as parameter.
-> We can also pass a Reader, InputStream, URL, byte array or char array to the createParser() method.

Parsing JSON with JsonParser
----------------------------

-> The way the JsonParser works is by breaking the JSON up into a sequence of tokens which you can iterate one by one.
-> As long as the isClosed() method of the JsonParser returns false, there are still more tokens in the JSON source.
-> JsonToken is obtained using the nextToken() of the JsonParser.
-> The token types are represented by a set of constants in the JsonToken class

JsonToken = START_OBJECT
JsonToken = FIELD_NAME
JsonToken = VALUE_STRING
JsonToken = FIELD_NAME
JsonToken = VALUE_NUMBER_INT
JsonToken = END_OBJECT
JsonToken = null

-> We can use these constants to find out what type of token the current JsonToken is. By using equals() method.

-> The getCurrentName() method of the JsonParser returns the current field name, if the token pointed to is a field name.

String carJson =
        "{ \"brand\" : \"Mercedes\", \"doors\" : 5 }";

JsonFactory factory = new JsonFactory();
JsonParser  parser  = factory.createParser(carJson);

Car car = new Car();
while(!parser.isClosed()){
    JsonToken jsonToken = parser.nextToken();

    if(JsonToken.FIELD_NAME.equals(jsonToken)){
        String fieldName = parser.getCurrentName();
        System.out.println(fieldName);

        jsonToken = parser.nextToken();

        if("brand".equals(fieldName)){
            car.brand = parser.getValueAsString();
        } else if ("doors".equals(fieldName)){
            car.doors = parser.getValueAsInt();
        }
    }
}

System.out.println("car.brand = " + car.brand);
System.out.println("car.doors = " + car.doors);

Jackson - JsonGenerator
-----------------------

The Jackson JsonGenerator is used to generate JSON from Java objects 

Creating a JsonGenerator
------------------------

-> To create Json Generator, JsonFactory instance is needed.
-> create the JsonGenerator using the createGenerator() method of the JsonFactory.

JsonFactory factory = new JsonFactory();

JsonGenerator generator = factory.createGenerator(
    new File("data/output.json"), JsonEncoding.UTF8);
	
-> The first parameter of the createGenerator() method is the destination of the generated JSON.
-> The createGenerator() method is overloaded, so there are other versions of the createGenerator() method which takes e.g an OutputStream etc.
-> The second parameter of the createGenerator() method is the character encoding to use when generating the JSON.

Generating JSON With The JsonGenerator
--------------------------------------

-> The JsonGenerator contains a set of write...() methods which you can use to write the various parts of a JSON object. 

-> writeStartObject() which writes a { to the output.
-> writeStringField() which writes the brand field name + value to the output.
-> writeEndObject() is called which writes a } to the output.

Closing the JsonGenerator
-------------------------

generator.close();

-> Closing the JsonGenerator will also close the file or OutputStream etc. whereto the JsonGenerator writes the generated JSON.

Jackson Annotations
-------------------

-> Java annotations used to influence how JSON is read into objects, or what JSON is generated from the objects. 

Read + Write Annotations
------------------------

1. @JsonIgnore 			 ->  @JsonIgnore is used to tell Jackson to ignore a certain property (field) of a Java object. 
						 ->  The property is ignored both when reading JSON into Java objects, and when writing Java objects into JSON. 

2. @JsonIgnoreProperties -> The @JsonIgnoreProperties Jackson annotation is used to specify a list of properties of a class to ignore. 

3. @JsonIgnoreType 		 -> The @JsonIgnoreType Jackson annotation is used to mark a whole type (class) to be ignored everywhere that type is 
							used.

4. @JsonAutoDetect 		 -> @JsonAutoDetect is used to tell Jackson to include properties which are not public, both when reading and writing 
					        objects. 
						 -> The JsonAutoDetect.Visibility class contains constants matching the visibility levels in Java, meaning ANY,
						    DEFAULT, NON_PRIVATE, NONE, PROTECTED_AND_PRIVATE and PUBLIC_ONLY.

Read Annotations
----------------

1. @JsonSetter -> @JsonSetter is used to tell Jackson that it should match the name of this setter method to a property name in the JSON 
				  data, when reading JSON into objects.

	Ex: 

		Attribute - personId

		Json string - 

		{
		  "id"   : 1234,
		  "name" : "John"
		}

		-> The @JsonSetter annotation instructs Jackson to use a setter method for a given JSON field. In our case we add the @JsonSetter annotation above the setPersonId() method.

		@JsonSetter("id")
		public void setPersonId(long personId) { 
			this.personId = personId; 
		}

2. @JsonAnySetter ->  @JsonAnySetter instructs Jackson to call the same setter method for all unrecognized fields in the JSON object

	unrecognized -> means all fields that are not already mapped to a property or setter method in the Java object.

	-> this only has effect on unrecognized fields. If there is a public method or a setter for private variable, then this will not be called.

3. @JsonCreator ->  @JsonCreator is used to tell Jackson that the Java object has a constructor (a "creator") which can match the fields of a 
				    JSON object to the fields of the Java object.

	-> It is mostly used in immutable objects as they do not have any setter methods, so they need their initial values injected into the constructor.

	To tell Jackson that it should call the constructor of PersonImmutable 

	1. add the @JsonCreator annotation to the constructor.
	2. annotate the parameters of the constructor to tell Jackson which fields from the JSON object to pass to which constructor parameters

	
4. @JacksonInject -> @JacksonInject is used to inject values into the parsed objects, instead of reading those values from the JSON. 

5. @JsonDeserialize -> @JsonDeserialize is used to specify a custom de-serializer class for a given field in a Java object.
					-> need to add the @JsonDeserialize annotation to the field you want to use the custom deserializer for.


@JsonAnyGetter ->  @JsonAnyGetter Jackson annotation enables you to use a Map as container for properties that you want to serialize to 
				   JSON. 	
				   
@JsonPropertyOrder -> @JsonPropertyOrder Jackson annotation can be used to specify in what order the fields of your Java object should be 
					  serialized into JSON.
					  
@JsonRawValue -> @JsonRawValue Jackson annotation tells Jackson that this property value should written directly as it is to the JSON output. 
			  -> If the property is a String Jackson would normally have enclosed the value in quotation marks, but if annotated with the   @JsonRawValue property Jackson won't do that.
				   
Ex: 

without @JsonRawValue

personJson = {"id":0,"address":"{ \"street\" : \"Cafe Streer\", \"number\" : 23}"}

with @JsonRawValue

personJson = {"id":0,"address":{ "street" : "Cafe Streer", "number" : 23}}


@JsonValue ->  @JsonValue tells Jackson that Jackson should not attempt to serialize the object itself, but rather call a method on the
			   object which serializes the object to a JSON string.	
			   
@JsonSerialize -> @JsonSerialize Jackson annotation is used to specify a custom serializer for a field in a Java object. 
			   -> The OptimizedBooleanSerializer will serialize a true value to 1 and a false value 0. 
			   
			   
Boon Installation
=================

Boon maven dependency


<dependency>
    <groupId>io.fastjson</groupId>
    <artifactId>boon</artifactId>
    <version>0.33</version>
</dependency>

Creating an ObjectMapper
-----------------------

ObjectMapper mapper = JsonFactory.create();

Parsing JSON Into Objects
--------------------------

String fleetStr = "{" +
        "  \"cars\" : [" +
        "     { \"brand\" : \"Audi\", \"doors\" : 4 }" +
        "    ,{ \"brand\" : \"Mercedes\", \"doors\" : 3}" +
        "    ,{ \"brand\" : \"BMW\",  \"doors\" : 2 }" +
        "  ]" +
        "}";

ObjectMapper mapper = JsonFactory.create();

Fleet fleet = mapper.readValue(fleetStr, Fleet.class);

public class Fleet {
    public Car[] cars = null;
}

public class Car {

    public String brand = null;
    public int    doors = 0;

    public Car() {}

    public Car(String brand, int doors) {
        this.brand = brand;
        this.doors = doors;
    }
}

Parsing JSON into Maps
----------------------

->  pass Map.class as second parameter to the readValue()

Parsing JSON From Other Sources
-------------------------------

Boon can parse JSON from other sources than strings. You can parse also JSON from a:

byte array
char array
File
Reader
InputStream
String

Example:

Fleet fleet = mapper.readValue(
        new FileInputStream("data/fleet.json"), Fleet.class);
		
Generating JSON From Objects
----------------------------

-> generate JSON from an object by calling the writeValue() or writeValueAsString() methods of the Boon ObjectMapper.

Fleet fleet   = new Fleet();
fleet.cars    = new Car[1];
fleet.cars[0] = new Car("Mercedes", 5);

ObjectMapper mapper = JsonFactory.create();

String json = mapper.writeValueAsString(fleet);
System.out.println(json);

{"cars":[{"brand":"Mercedes","doors":5}]}

Generating JSON From Maps
-------------------------

-> Pass a Map instance as the second parameter to the writeValue() or writeValueAsString() method. 

Date Formats in JSON
--------------------

-> The Boon ObjectMapper can work with different date formats in JSON. 
-> It can use parse and generate both a long version of a date (the number of milliseconds since jan. 1. 1970)

Parsing a long Into a Date
--------------------------

-> Boon's ObjectMapper can parse a long value in JSON into a date.
-> When the ObjectMapper parses this JSON string it converts the long value of the paymentDate into a Date object, because the paymentDate field of the Payment class is a Date.

String paymentJson = "{ \"paymentDate\" : 1434016456493 }";

ObjectMapper objectMapper = JsonFactory.create();

Payment payment = objectMapper.readValue(paymentJson, Payment.class);

Parsing a Date String Into a Date
---------------------------------

String paymentJson = "{ \"paymentDate\" : \"2015-06-11T12:33:00.014Z\" }";

ObjectMapper objectMapper = JsonFactory.create();
//ObjectMapper objectMapper = JsonFactory.createUseJSONDates();

Payment payment = objectMapper.readValue(paymentJson, Payment.class);

System.out.println("payment.paymentDate = " + payment.paymentDate);

Generating Date Strings in JSON
-------------------------------

-> By default the ObjectMapper will serialize a Date to a long number (milliseconds) when generating JSON from an object.
-> We can create a version of the ObjectMapper which creates date strings instead.

ObjectMapper objectMapper = JsonFactory.createUseJSONDates();

-> using createUseJSONDates, Date fields will get converted to date strings in the serialized JSON instead of numbers.

Annotations
-----------

-> Boon contains a set of annotations that can be used to adjust the parsing or generation of JSON.

1. @JsonIgnore
2. @JsonInclude

@JsonIgnore
-----------

-> The @JsonIgnore annotation can be placed above a field in a class. 
-> When Boon detects the @JsonIgnore it will ignore that field and Boon will not serialize the comment field when serializing a Car object.

@JsonInclude
------------

-> By default Boon excludes fields from serialization that are empty (null), empty lists, or fields which have default values
-> If we want Boon to include such fields in the generated JSON, you can add a @JsonInclude annotation to the field.

Parsing Primitives
------------------

-> Boon can also parse fragments of JSON into Java primitives.
Ex: parsing a string into an int or a JSON array into an array of Java primitives.
-> We  need to access the JsonParserAndMapper returned from the ObjectMapper's parser method. On the JsonParserAndMapper instance you can call the primitive parsing methods.

Ex: 1	String to int
	
	int intVal = objectMapper.parser().parseInt("123");

Ex: 2  json string with array of numbers to primitive java types

	int[] ints = objectMapper.parser()
        .parseIntArray("[123, 456, 789]");

Ex: 3 JSON string representing an object into a Java Map

	String jsonMap = "{ \"key1\" : \"val1\", \"key2\" : \"val2\" }";

	Map<String, Object> map =
			objectMapper.parser().parseMap(jsonMap);

			
			
GSON - Installation
-------------------

GSOn Maven dependency

<dependency>
    <groupId>com.google.code.gson</groupId>
    <artifactId>gson</artifactId>
    <version>2.3.1</version>
</dependency>

Creating a Gson Instance
------------------------

two ways to create a Gson instance:

1. Using new Gson()

	Gson gson = new Gson();

2. Creating a GsonBuilder instance and calling create() on it.

	GsonBuilder builder = new GsonBuilder();
	Gson gson = builder.create();
	
-> Using a GsonBuilder allows you to set configuration options on the GsonBuilder before creating the Gson object.


Parsing JSON Into Java Objects
-------------------------------

	String json = "{\"brand\":\"Jeep\", \"doors\": 3}";

	Gson gson = new Gson();

	Car car = gson.fromJson(json, Car.class);

Pretty Printing
---------------

	Gson gson = new Gson(); > compact json, hard to read

	Ex: {"brand":"Rover","doors":5}

	Gson gson = new GsonBuilder().setPrettyPrinting().create(); -> pretty printing, easy to read

	Ex: 
	{
	  "brand": "Rover",
	  "doors": 5
	}

Excluding Fields
----------------

-> gson can exlude a field from being serialized.

Transient fields
-----------------

-> If you make a field in a Java class transient then GSON will ignore it in both serialization and deserialization.

	public class Car {
		public transient String brand = null;
		public int    doors = 0;
	}

The @Expose Annotation
-----------------------

->  used to mark a field to be exposed or not (included or not) when an object is serialized or deserialized. 
-> 2 boolean parameters.

	@Expose(serialize = true); ->  specifies if the field annotated with the @Expose annotation should be included when the owning object is 
								   serialized.
	@Expose(serialize = false);
	@Expose(deserialize = true); ->  specifies whether that field should be read when the owning object is deserialized.
	@Expose(deserialize = false);
	@Expose(serialize = true , deserialize = false);
	@Expose(serialize = false, deserialize = true);


	public class Car {

		@Expose(serialize = false, deserialize = false)
		public String brand = null;

		@Expose(serialize = true, deserialize = true)
		public int    doors = 0;
	}

-> In order to get GSON to react to the @Expose annotations you must create a Gson instance using the GsonBuilder class.

GsonBuilder builder = new GsonBuilder();
builder.excludeFieldsWithoutExposeAnnotation();
Gson gson = builder.create();

-> this configuration makes GSON ignore all fields that do not have an @Expose annotation. 
-> To have a field included in serialization or deserialization it must have an @Expose annotation above it.

GsonBuilder.setExclusionStrategies()
------------------------------------

-> Another way to exclude a field of a class from serialization or deserialization in GSON is to set an ExclusionStrategy on a GsonBuilder, and use that GsonBuilder to build the Gson object with

-> ExclusionStrategy is an interface, so you will have to create a class that implements the ExclusionStrategy interface. 

Implementing ExclusionStrategy with anonymous inner class

	ExclusionStrategy exclusionStrategy = new ExclusionStrategy() {
		public boolean shouldSkipField(FieldAttributes fieldAttributes) {
			if("brand".equals(fieldAttributes.getName())){
				return true;
			}
			return false;
		}

		public boolean shouldSkipClass(Class aClass) {
			return false;
		}
	};

-> inside the shouldSkipField() method of the ExclusionStrategy implementation the example checks if the given field name is brand. If it is, that field is excluded from serialization and deserialization.

	GsonBuilder builder = new GsonBuilder();
	builder.setExclusionStrategies(exclusionStrategy);

	Gson gson = builder.create();

-> The exclusionStrategy variable has to point to an implementation of the ExclusionStrategy interface.

Serializing Null Fields
-----------------------

-> By default the Gson object does not serialize fields with null values to JSON. If a field in a Java object is null, Gson excludes it.

-> We can force Gson to serialize null values via the GsonBuilder

-> Once serializeNulls() has been called the Gson instance created by the GsonBuilder will include null fields in the serialized JSON.

	GsonBuilder builder = new GsonBuilder();

	builder.serializeNulls();

	Gson gson = builder.create();

	Car car = new Car();
	car.brand = null;

	String json = gson.toJson(car);
	System.out.println(json);

Custom Instance Creators in GSON
--------------------------------

-> By default GSON will try to create an instance of a given class by calling the no-arg constructor of that class.
-> if a given class does not have a default constructor, or we want to do some default configuration of the instance, we need to create and register our own instance creator.

-> A GSON instance creator is simply an object factory. 
-> An instance creator has to implement the InstanceCreator interface.

	import com.google.gson.InstanceCreator;

	public class CarCreator implements InstanceCreator<Car> {
		public Car createInstance(Type type) {
			Car car = new Car();
			car.brand = "Toyota";
			return car;
		}
	}

-> use the CarCreator class by registering it on a GsonBuilder before you create the Gson instance. 

	GsonBuilder gsonBuilder = new GsonBuilder();

	gsonBuilder.registerTypeAdapter(Car.class, new CarCreator());

	Gson gson  = gsonBuilder.create();
	
-> the Gson instance will use the CarCreator instance to create Car instances.


Version Support in GSON
------------------------

-> GSON version support means that you can mark fields in your Java classes with a version number, and then have GSON include or exclude fields from your Java classes based on their version number.

-> For versioning  @Since annotation should be used.
->  create a GsonBuilder and tell it what version it should be serializing to and deserializing from.

	GsonBuilder builder = new GsonBuilder();
	builder.setVersion(2.0);

	Gson gson = builder.create();
	
-> The Gson instance created from the above GsonBuilder will now just include fields that are annotated with @Since(2.0) or a lower version number than 2.0. The email field is annotated with version 3.0 which is later than 2.0, so GSON will exclude the email field.

Custom Serialization and Deserialization
----------------------------------------

-> custom serializers can convert Java values to custom JSON, and your custom deserializers can convert custom JSON to Java values again.

Custom Serializer
-----------------

-> A custom serializer in GSON has to implement the JsonSerializer interface. 

-> Implementing a custom serializer that can serializer boolean values.

	public class BooleanSerializer implements JsonSerializer<Boolean> {

	  public JsonElement serialize(Boolean aBoolean, Type type,
		JsonSerializationContext jsonSerializationContext) {
		if(aBoolean){
		   return new JsonPrimitive(1);
		}
		  return new JsonPrimitive(0);
	  }
	}

-> Registering this custom serializer
	
	GsonBuilder builder = new GsonBuilder();

	builder.registerTypeAdapter(Boolean.class, new BooleanSerializer()) ;

	Gson gson = builder.create();

	
	PojoWithBoolean pojo = new PojoWithBoolean();
	pojo.username = "abc";
	pojo.isSuperUser = false;

	String pojoJson = gson.toJson(pojo);

	System.out.println(pojoJson);
	
->  the false value of isSuperUser is converted to a 0.


Custom Deserializer
------------------

-> A custom deserializer must implement the JsonDeserializer interface.

	public class BooleanDeserializer implements JsonDeserializer<Boolean> {

		public Boolean deserialize(JsonElement jsonElement, Type type,
		JsonDeserializationContext jsonDeserializationContext)
		throws JsonParseException {

			return jsonElement.getAsInt() == 0 ? false : true;
		}
	}

-> Registering this custom deserializer

	GsonBuilder builder = new GsonBuilder();
	builder.registerTypeAdapter(Boolean.class, new BooleanDeserializer());

	Gson gson = builder.create();
	
	String jsonSource = "{\"username\":\"abc\",\"isSuperUser\":1}";

	PojoWithBoolean pojo = gson.fromJson(jsonSource, PojoWithBoolean.class);

	System.out.println(pojo.isSuperUser);
	
	
GSON - JsonReader
-----------------

GSON - JsonReader -> GSON streaming JSON parser, enables you to read a JSON string or file as a stream of JSON tokens.

-> GSON JsonReader is referred to as a streaming JSON parser because iterating JSON token for token is also referred to as streaming through the JSON tokens.

Two types of streaming parsers

1. Pull parsers -> parser where the code using it pulls the tokens out of the parser when the code is ready to handle the next token. 
2. Push parsers -> parses through the JSON tokens and pushes them into an event handler. 

-> The GSON JsonReader is a pull parser.


Creating a GSON JsonReader
--------------------------

	String json = "{\"brand\" : \"Toyota\", \"doors\" : 5}";

	JsonReader jsonReader = new JsonReader(new StringReader(json));


Iterating the JSON Tokens of a JsonReader
-----------------------------------------

	while(jsonReader.hasNext() {

	}


hasNext() method -> returns true if the JsonReader has more tokens.

peek() method ->  returns the next JSON token, but without moving over it.

beginObject(), nextString() and nextLong() return the value of the current token.

GSON - JsonParser
-----------------

->  GSON JsonParser class can parse a JSON string or stream into a tree structure of Java objects. 

GSON has two parsers.

1. Gson JSON parser -> can parse JSON into Java objects
2. JsonReader -> can parse a JSON string or stream into tokens 

Creating a JsonParser
---------------------

	JsonParser jsonParser = new JsonParser();
	
Parsing JSON Into a Tree Structure
----------------------------------

	JsonParser parser = new JsonParser();

	String json = "{ \"f1\":\"Hello\",\"f2\":{\"f3:\":\"World\"}}";

	JsonElement jsonTree = parser.parse(json);
	
Iterating the JSON Tree Structure
---------------------------------

-> The parsed JSON tree structure consists of objects from the GSON API.
->  The root of a JSON tree structure is a JsonElement object.

jsonTree.isJsonObject();
jsonTree.isJsonArray();
jsonTree.isJsonNull();
jsonTree.isJsonPrimitive();


The JSON string parsed above is a JSON object. Thus, we will expect the JsonElement to represent a JSON object.

->  Using JsonObject instance you can extract fields from it using its get() method.
	
-> We can inspect the type of each of these fields

	JsonParser parser = new JsonParser();

	String json = "{ \"f1\":\"Hello\",\"f2\":{\"f3:\":\"World\"}}";

	JsonElement jsonTree = parser.parse(json);

	if(jsonTree.isJsonObject()){
		JsonObject jsonObject = jsonTree.getAsJsonObject();

		JsonElement f1 = jsonObject.get("f1");

		JsonElement f2 = jsonObject.get("f1");

		if(f2.isJsonObject()){
			JsonObject f2Obj = f2.getAsJsonObject();

			JsonElement f3 = f2Obj.get("f3");
		}

	}




