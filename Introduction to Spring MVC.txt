													Introduction to Spring MVC
													==========================

->  Spring MVC is a web application framework for developing applications using Enterprise Java or J2EE.

Which Framework?
----------------

1. Struts -> standard struts 1, outdated. Struts2 is better than original struts.
2. Tapestry -> good framework but governed by 1 person and someone at the WIM or whatever project he is working on.
            -> first heavily object-oriented or POJO-based web frameworks. 
3. Apache Wicket -> light weight framework, easier to configure than other frameworks.
4. GWT -> Google Web Toolkit is a very rich user experience framework with a steeper learning curve than other frameworks.
5. JSF -> JSF from Oracle, true standard framework for the web and J2EE as well, rich user experience. 
	   -> It comes with libraries like ice faces and rich faces and other third party components for integrating into JSF.
6. Seam -> Seam is a JSF framework from the JBoss Group that has other things integrated into it but has a little bit of tendancy to have some 		vendor lock-in associated with it. 
		-> It's nice, tight package but we stuck doing things their way. 
7. Stripes -> a very lightweight web framework that has very similar features to Spring MVC. It's a view technology framework. 
8. Spring MVC -> It is very unobtrusive framework. 
			  -> lightweight, in the sense that there's very little overhead in running it but it's very cabable, heavy duty framework. 
			  -> It puts a lot of the best practices from all of above frameworks mentioned above and combines it into Spring MVC.
			  -> Spring MVC integrates very nicely with Spring and all other capabilities that Spring has available for us to use. 
			  
What is Spring MVC?
------------------

-> Spring MVC doesn't try to niche itself for one particular type of web application. 
-> It can be RESTful-based/ JSP-based. 
-> We can use other view technologies like FreeMarker or Velocity.
-> We can use it for headless applications. 
-> We can use it as a remoting framework. 
-> All these capabilities are built into Spring MVC. 

-> Spring MVC is a web framework built around the principles od Spring.
-> interface driven design, it's very POJO based. 
-> can be unit tested very easily and it's very lightweight, very unobtrusive. 
-> It is based on a Dispatcher servlet/ Front Controller Pattern. 
-> MVC stands for Model view Controller. 
-> It doesn't weigh us down with things we don't need. 
-> Disadvantage of JSF is that it is very heavy weight and we need to do things their way.
-> SPring will just take the things we want and just use those. 
-> Spring MVC is also built from shortcomings of struts1.
-> It supports for 
	1. themes, 
	2. localization, 
	3. Restful services, 
	4. annotation based configuration. (No need of using interfaces and their code if don't want to)
	5. Seamless integration with other spring services/beans.
	

History
-------

2003 

-> Spring framework 1st milestone released. 
-> Focus was on interface-driven development and overcoming the complexities of J2EE development. 

2004 

-> 1.0 release of spring framework.
-> incorporated spring MVC and focused on other areas.
-> integration with common tools like Hibernate and .NET

2006

-> 1.26 version, Jolt productivity award, 
-> SCG/ Spring Securty integrated into the framework.
-> more spring tools

2006

-> 2.0 release, until here things were backward compatible. 

2007

-> 2.5 version, focus on annotation-driven development. 
-> Significant release, as all the configuration was done through annotations, before that it was XML heavy. 

2009

-> 3.0 and 3.1 versions, above things carried on. 
-> Can do configuration using Java, no need of using XML.


Architecture
-----------

-> Spring MVC is built on top of the Java servlet API, implemented using serlvet front controller. 
-> So, spring MVC/ struts or all otherframeworks are just servlets, they got design patterns and things wrapped around it to make it easier. 
-> We write our application on top of Spring MVC or using Spring MVC to build this entire stock. 

				CUSTOM APP
					|
					|
					|
			SPRING MVC/ Spring
					|
					|
					|
			JAVA SERVLETS/JEE


Request/Response life cycle
-----------------------------

-> We have an incoming request that hits our SERVLET FRONT CONTROLLER, just like Dispatcher servlet inside of Spring. 

Servlet Front Controller

-> It hands off the request, delegates our request over to one of our CONTROLLERS that we've set up.

Dispatcher

-> It is the router that comes in and says 
"What controller is going to handle it? I am going to delegate this request over to this controller over here."

Controller 

-> Conrtoller just routes traffic to where it's supposed to go, It says
" I'm going to handle the request and had it over at the backend."

Backend 

-> Backend could be composed of web services or a database or multiple databases or any number of things that we're gathering data from. 
-> Backend hands back a model to us. 

Model 

-> Model is our data, what we're trying to represent on our screen. 

-> Once model gets back to the controller, the controller syas, "ok, I am going to let somebody else do the rendering."
-> rendering is separate from the business logic. 
-> This is called model-view-controller design pattern. Everything is doing its own specified functionality here. 

-> At the controller, we have model or data that we're going to try and represent the UI. 
-> So, we go back to out Front Controller and it says, 
"who's going to handle this? Who's going to render the response? let's pass our model down to some view template."
-> view template can be JSP, once model goes template/JSP page, the control returns back  to our Front Controller and then return back our response to the browser.
-> The whole thing is divided into 3 parts: model, view, controller. 


  Incoming                     Delegate                       Handle
  Request                      request                        Request
-------------->   Front      ------------>   Controller    -----------------> Backend
<-------------- Controller   <---Model-----                <-----------------
  Return           ^  |       Delegate                      Create
  response         |  |       rendering                      Model
				   |  |
                   |  Model
                   |  |
                   |  |
     Return        View            Render
	 Control      Template         Response



Vocabulary
----------

1. Dispatcher Servlet -> The entry/ configuration point for the application. 
                   -> It is also the Front Controller 
	
2. Controller -> Command pattern object that handles the request and determines which view to route to and what model we should get and handles that information and hands it back and forth.
			-> Controllers are simple POJOs.

3. Request Mapping -> The url and request type that our method is tied to. 
                   -> If we accept posts or we accept gets or puts or deletes, those type of HTML protocol requests, then the Request mapping can say, "I only accept posts, I only accept gets."

4. View Resolver -> used to locate the JSP pages or whatever view technology we are using. 
				 -> We configure a view resolver and that's how Spring MVC knows when we ask for the hello page, where to actually find the hello page at.

5. Servlet-config -> it is a configuration file per DispatcherServlet.
				  -> This is where Spring knows to configure things and wire our application up.

6. POJO -> Plain Old Java Object
        -> has no arguments constructor and private member variables, exposed through getters and setters.

7. Bean -> A Spring configured POJO.
        -> It's a POJO that we've instantiated through Spring, in the Servlet-config and it's wired up to be used inside of our framework. 
			  

Summary
-------

1. J2EE based
2. Built around best practice patterns.
3. Stable release cycle.
4. Backwards/forwards compatible.
5. Very active community.
6. Lightweight and unobtrusive
7. Flexible to use with web services, Javascript UI, standard html etc


Building an Application
========================

Prerequisites:
--------------

1. JAVA ( version >= 5)
2. Maven ( version = 3)
3. Spring STS
4. Tomcat


What we are building
-------------------

-> Building app to track the minutes that you have exercised in a day. 

App feautures

1. Allow for entering minutes exercising
2. Show total minutes
3. Set goal for the day
4. Notify when gal is reached.

Getting Spring MVC
-------------------

-> Spring Web flow and Spring web services are not the same thing. 
-> Web flow is a framework built on top of web MVC. 
-> Download spring framework

spring-franework-4.3.3.RELEASE-dist.zip

Maven
-----

-> Using Maven we need only 3 dependencies:

Dependencies

1. spring-webmvc
2. servlet-api
3. jstl

Get the dependencies and use it in pom.xml

While adding dependencies in the pom.xml, 

-> scope for spring-webmvc is compile.
-> scope for servlet-api is provided( provided means don't package it with the WAR file, becoz they are already provided with tomact)
-> scope for jstl is provided.

After adding the dependencies in pom.xml, we get jar files under the Maven dependencies, those are called as transdependencies. 

Spring MVC Configuration
------------------------

There are 4 basic parts we need to configure to utilize Spring MVC in our application.

1. Configure web.xml
2. Configure servlet-config.xml
3. Add Controller
4. Add View

Controller -> is a simple Java class that's annotated

Tomcat
------

-> Tomcat is just a web container. 
-> It doesn't have app server functionality like Oracle, WebSphere. 
-> For most web applications though Tomcat is just fine. 
-> We setup Tomcat server and then FitnessTracker.war will actually reside on top of that. 

			FitnessTracker.war
					|
					|
					|
				 Tomcat 
			  Web Container


			  









































			  
